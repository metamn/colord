// Calls a JSON API via AJAX
// - the container has to have a `data-url` set up to perfom the call
// - the response is sent back via a callback function
var jsonAPICall = function(containerID, callback) {
  var container = document.querySelector(containerID);
  if (!container) return;
  
  var url = container.dataset.url;

  // JSON AJAX Call to an API endpoint
  // - http://www.w3schools.com/json/json_http.asp
  var xmlhttp = new XMLHttpRequest();
  xmlhttp.open("GET", url, true);
  xmlhttp.send();

  // Process request
  xmlhttp.onreadystatechange = function() {
    if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
      var result = JSON.parse(xmlhttp.responseText);
      callback(result);
    }
  }
}

// Read the `figure` element's responsive images and breakpoints for later reuse
// - the data gathered is passed to a callback function
var responsiveImageURL = function(elementID, callback) {
  var element = document.querySelector(elementID);
  if (!element) return;
  
  var picture = element.querySelector('.picture');

  // Collect images and breakpoints from `picture`
  // - <source media="(min-width: 600px)" srcset="/assets/images/placeholder-16-9_tablet.png, /assets/images/placeholder-16-9_tablet2x.png 2x">
  // - start with mobile then go to desktop; media queries stop at the first match
  for (var i = picture.children.length - 1; i >= 0 ; i--) {
    var srcset = picture.children[i].srcset;
    var media = picture.children[i].media;
    var images = srcset.split(', ');

    for (var j = 0; j < images.length; j++) {
      var x2 = images[j].split(' 2x');
      var retina = (x2.length > 1);

      callback(element, x2[0], media, retina);
    }
  }
};

// http://codepen.io/drainpip/pen/pvKobQ

function getScrollTop() {
  if (typeof pageYOffset != 'undefined') {
    //most browsers except IE before #9
    return pageYOffset;
  } else {
    var B = document.body; //IE 'quirks'
    var D = document.documentElement; //IE with doctype
    D = (D.clientHeight) ? D : B;
    return D.scrollTop;
  }
}


function scrollTo(element, duration, easingFunction) {
  var Y = element.getBoundingClientRect().top;
  var start = Date.now(),
      from = getScrollTop();

  if (from == Y) {
    return;
  }

  function min(a, b) {
    return a < b ? a : b;
  }

  function scroll(timestamp) {
    var currentTime = Date.now(),
        time = min(1, ((currentTime - start) / duration)),
        easedT = easingFunction(time),
        topCalc = (easedT * (Y - from)) + from;

    document.documentElement.scrollTop = topCalc;
    document.body.scrollTop = topCalc;

    if (time < 1) {
      requestAnimationFrame(scroll);
    }
    else {
      return;
    }
  }

  requestAnimationFrame(scroll)
}

// options for easing when I call the obove function
var easing = {
  // no easing, no acceleration
  linear: function(t) { return t },
  // accelerating from zero velocity
  easeInQuad: function(t) { return t * t },
  // decelerating to zero velocity
  easeOutQuad: function(t) { return t * (2 - t) },
  // acceleration until halfway, then deceleration
  easeInOutQuad: function(t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t },
  // accelerating from zero velocity
  easeInCubic: function(t) { return t * t * t },
  // decelerating to zero velocity
  easeOutCubic: function(t) { return (--t) * t * t +1 },
  // acceleration until halfway, then deceleration
  easeInOutCubic: function(t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1 },
};

// Read the `figure` element's responsive images and breakpoints
// Set as background image with `matchMedia` coming from `Picturefill`
var setBackgroundImage = function(elementID) {

  // Set a responsive background image using `mathcMedia`
  function setResponsiveBackgroundImage(element, image, breakpoint, retina) {
    var mediaQuery = "only screen and " + breakpoint;

    if (retina) {
      // This might not be cross platform compatible ....
      mediaQuery += " and (-webkit-min-device-pixel-ratio: 2)";
    }

    if (matchMedia(mediaQuery).matches) {
      element.style.backgroundImage = "url('" + image + "')";
    }
  }

  responsiveImageURL(elementID, setResponsiveBackgroundImage);
};

// Read the `figure` element's responsive images and breakpoints
// Set as poster using `matchMedia` coming from `Picturefill`
// elementID is the container holding the video and the poster image
var videoResponsivePoster = function(elementID) {

  // Set a responsive poster using `mathcMedia`
  function setVideoResponsivePoster(element, image, breakpoint, retina) {
    var video = element.querySelector('.video');

    var mediaQuery = "only screen and " + breakpoint;

    if (retina) {
      // This might not be cross platform compatible ....
      mediaQuery += " and (-webkit-min-device-pixel-ratio: 2)";
    }

    if (matchMedia(mediaQuery).matches) {
      video.poster = image;
    }
  }

  responsiveImageURL(elementID, setVideoResponsivePoster);
};

// Adding the class `img--loaded` for images after they are all fully loaded
// - 'containerID' can be like '.hero' or '.articles .article'
var imagesLoading = function(containerID) {
  var containers = document.querySelectorAll(containerID);

  for (var i = 0; i < containers.length; i++) {
    imageLoading(containers[i]);
  }
}

// Adding the class `img-loaded` for images inside a single container
// - uses the imagesLoaded external library
var imageLoading = function(container) {
  var images = container.querySelectorAll('.img');
  var figures = container.querySelectorAll('.figure');

  imagesLoaded(container, function(instance) {
    for (var i = 0; i < images.length; i++) {
      figures[i].classList.add('figure--loaded');
      images[i].classList.add('img--loaded');
    }
  });
}
